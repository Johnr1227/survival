package com.cool;

import static org.lwjgl.glfw.GLFW.GLFW_FALSE;
import static org.lwjgl.glfw.GLFW.GLFW_VISIBLE;
import static org.lwjgl.glfw.GLFW.glfwCreateWindow;
import static org.lwjgl.glfw.GLFW.glfwGetPrimaryMonitor;
import static org.lwjgl.glfw.GLFW.glfwGetVideoMode;
import static org.lwjgl.glfw.GLFW.glfwInit;
import static org.lwjgl.glfw.GLFW.glfwMakeContextCurrent;
import static org.lwjgl.glfw.GLFW.glfwPollEvents;
import static org.lwjgl.glfw.GLFW.glfwSetKeyCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowFocusCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowPos;
import static org.lwjgl.glfw.GLFW.glfwSetWindowSizeCallback;
import static org.lwjgl.glfw.GLFW.glfwShowWindow;
import static org.lwjgl.glfw.GLFW.glfwSwapBuffers;
import static org.lwjgl.glfw.GLFW.glfwTerminate;
import static org.lwjgl.glfw.GLFW.glfwWindowHint;
import static org.lwjgl.glfw.GLFW.glfwWindowShouldClose;
import static org.lwjgl.opengl.GL11.GL_BLEND;
import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
import static org.lwjgl.opengl.GL11.glBlendFunc;
import static org.lwjgl.opengl.GL11.glClear;
import static org.lwjgl.opengl.GL11.glClearColor;
import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glOrtho;

import java.io.IOException;

import org.lwjgl.glfw.GLFWKeyCallback;
import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.glfw.GLFWWindowFocusCallback;
import org.lwjgl.glfw.GLFWWindowSizeCallback;
import org.lwjgl.opengl.GL;

import com.cool.audio.Audio;
import com.cool.lib.Color;
import com.cool.lib.IO;
import com.cool.lib.Keyboard;
import com.cool.menu.CharacterCustomize;
import com.cool.menu.MainMenu;
import com.cool.menu.Menu;
import com.cool.menu.WorldMenu;

public class Main {

	public static long window;

	public static int WINDOW_WIDTH = 0;
	public static int WINDOW_HEIGHT = 0;

	public static int MOUSEX;
	public static int MOUSEY;

	public static int TICKS = 0;

	public static Game game;

	public static boolean windowFocused = false;

	public static CharacterCustomize characterCustomize;
	public static WorldMenu worldMenu;
	public static MainMenu mainMenu;

	public static void main(String[] args) throws IOException {
		if (!glfwInit()) {
			throw new IllegalStateException("Failed to initialize GLFW!");
		}
		GLFWVidMode videoMode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		WINDOW_WIDTH = 720;
		WINDOW_HEIGHT = 720;

		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE);

		window = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, "Top Down", 0, 0);
		if (window == 0) {
			throw new IllegalStateException("Failed to create window!");
		}
		glfwSetWindowPos(window, (videoMode.width() - WINDOW_WIDTH) / 2, (videoMode.height() - WINDOW_WIDTH) / 2);

		glfwShowWindow(window);

		glfwMakeContextCurrent(window);
		@SuppressWarnings("unused")
		GLFWKeyCallback keyCallback;
		glfwSetKeyCallback(window, keyCallback = new Keyboard());

		GL.createCapabilities();
		glEnable(GL_TEXTURE_2D);
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glOrtho(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT, 1, -1);

		Textures.setTextures();

		// set background color
		glClearColor(0f, 0f, 0f, 1f);

		Audio.init();
		Sounds.init();

		game = new Game(window);
		
		Color c = new Color(0,1,0);
		IO.write("./placey", c);
		Color c2 = (Color)IO.read("./placey");

		glfwSetWindowSizeCallback(window, new GLFWWindowSizeCallback() {

			@Override
			public void invoke(long window, int width, int height) {
				WINDOW_WIDTH = width;
				WINDOW_HEIGHT = height;
//				glOrtho(0, WINDOW_WIDTH, WINDOW_HEIGHT, 0, 1, -1);

			}
		});
		glfwSetWindowFocusCallback(window, new GLFWWindowFocusCallback() {

			@Override
			public void invoke(long arg0, boolean focused) {
				if (focused) {
					windowFocused = true;
				} else {
					windowFocused = false;
					if (Menu.currentMenu == Menu.MenuTypes.GAME) {
						game.paused = true;
					}
				}
			}
		});
//		Sounds.MUSIC.loop();
		mainMenu = new MainMenu();
		mainMenu.init();
		worldMenu = new WorldMenu();
		worldMenu.init();
		characterCustomize = new CharacterCustomize();
		characterCustomize.init();
		while (!glfwWindowShouldClose(window)) {
			glfwPollEvents();
			if (windowFocused) {
				if (Menu.currentMenu == Menu.MenuTypes.MAIN) {
					mainMenu.tick();
					glClear(GL_COLOR_BUFFER_BIT);
					mainMenu.render();
					MOUSEX = game.getCursorPosX();
					MOUSEY = game.getCursorPosY();
					glfwSwapBuffers(window);
				}
				if (Menu.currentMenu == Menu.MenuTypes.WORLD_MENU) {
					worldMenu.tick();
					glClear(GL_COLOR_BUFFER_BIT);
					worldMenu.render();
					MOUSEX = game.getCursorPosX();
					MOUSEY = game.getCursorPosY();
					glfwSwapBuffers(window);
				}
				if (Menu.currentMenu == Menu.MenuTypes.CHARACTER_CUSTOMIZE) {
					characterCustomize.tick();
					glClear(GL_COLOR_BUFFER_BIT);
					characterCustomize.render();
					MOUSEX = game.getCursorPosX();
					MOUSEY = game.getCursorPosY();
					glfwSwapBuffers(window);
				}
				if (Menu.currentMenu == Menu.MenuTypes.GAME) {
					glClear(GL_COLOR_BUFFER_BIT);
					game.draw();
					game.tick();
					MOUSEX = game.getCursorPosX();
					MOUSEY = game.getCursorPosY();
					glfwSwapBuffers(window);
				}
			}
			TICKS++;
		}

		Audio.destroy();
		glfwTerminate();

	}
}