package com.cool.menu;

import java.util.Random;

import com.cool.Main;
import com.cool.Sounds;
import com.cool.Textures;
import com.cool.lib.Color;
import com.cool.lib.Controls;
import com.cool.lib.Keyboard;
import com.cool.lib.Renderer;

public class CharacterCustomize extends Menu {

	public int hairstyle = 1;

	public int pRenderX = 256;
	public int pRenderY = Main.WINDOW_HEIGHT - 384;
	public int pRenderX2 = 0;
	public int pRenderY2 = Main.WINDOW_HEIGHT;

	public Color pantsColor;
	public Color sleeveColor;
	public Color skinColor;
	public Color eyeColor;
	public Color shirtColor;
	public Color hairColor;

	public Color tempColor = new Color(1, 1, 1);
	public boolean changeColor = false;
	public boolean changingColor = false;
	public int selectedPart = 0;
	public int selectedColor = 0;

	@Override
	public void init() {
		createButton(704, 240, 16, 336, Textures.BUTTON_NORMAL, Textures.BUTTON_SELECTED, "PLAY GAME", 40);
		createButton(704, 128, 16, 224, Textures.BUTTON_NORMAL, Textures.BUTTON_SELECTED, "CHANGE COLOR", 40);
		createButton(704, 16, 16, 112, Textures.BUTTON_NORMAL, Textures.BUTTON_SELECTED, "CHANGE HAIRSTYLE", 40);
		setButtonSelectSound(Sounds.BUTTON_SELECT);
		setButtonClickSound(Sounds.BUTTON_SELECT);
		pantsColor = Color.random();
		sleeveColor = Color.random();
		skinColor = Color.random();
		eyeColor = Color.random();
		shirtColor = Color.random();
		hairColor = Color.random();
		Random random = new Random();
		hairstyle = random.nextInt(5) + 1;
	}

	@Override
	public void tick() {
		if (!changeColor) {
			super.tick();
			Keyboard.isKeyPressed(Controls.BREAK);
			if (buttonPressed) {
				buttonPressed = false;
				switch (buttonSelected) {
				case 0: // Start Game
					Menu.currentMenu = MenuTypes.GAME;
					break;
				case 1: // Options
					changeColor = true;
					break;
				case 2: // Quit
					hairstyle++;
					if (hairstyle > 5) {
						hairstyle = 1;
					}
					break;
				}
			}
		} else {
			if (changingColor) {
				if (Keyboard.isKeyPressed(Controls.BREAK)) {
					changingColor = false;
					Sounds.BUTTON_SELECT.play();
				}
				if (Keyboard.isKeyPressed(Controls.MOVE_UP) || Keyboard.isKeyPressed(Controls.MOVE_RIGHT)) {
					if (selectedColor < 3)
						selectedColor++;
					Sounds.BUTTON_SELECT.play();
				}
				if (Keyboard.isKeyPressed(Controls.MOVE_DOWN) || Keyboard.isKeyPressed(Controls.MOVE_LEFT)) {
					if (selectedColor > 0)
						selectedColor--;
					Sounds.BUTTON_SELECT.play();
				}
			} else {
				tempColor = new Color((float) (Math.sin(Main.TICKS / 30d) / 4f + 1f / 1.1f),
						(float) (Math.sin(Main.TICKS / 30d) / 4f + 1f / 1.1f),
						(float) (Math.sin(Main.TICKS / 30d) / 4f + 1f / 1.1f));
				if (Keyboard.isKeyPressed(Controls.BREAK)) {
					changeColor = false;
					Sounds.BUTTON_SELECT.play();
				}
				if (Keyboard.isKeyPressed(Controls.MOVE_UP) || Keyboard.isKeyPressed(Controls.MOVE_RIGHT)) {
					if (selectedPart < 5)
						selectedPart++;
					Sounds.BUTTON_SELECT.play();
				}
				if (Keyboard.isKeyPressed(Controls.MOVE_DOWN) || Keyboard.isKeyPressed(Controls.MOVE_LEFT)) {
					if (selectedPart > 0)
						selectedPart--;
					Sounds.BUTTON_SELECT.play();
				}
				if (Keyboard.isKeyPressed(Controls.INTERACT)) {
					changingColor = true;
					tempColor = new Color(0.4f,0.2f,0.7f);
					Sounds.BUTTON_SELECT.play();
				}
			}
		}
	}

	@Override
	public void render() {
		super.render();
		Renderer.drawTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_IDLE_BASE);
		if (changeColor && selectedPart == 0) {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_IDLE_PANTS,
					tempColor);
			Renderer.drawString(pRenderX, Main.WINDOW_HEIGHT - 50, 50, "Pants");
		} else {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_IDLE_PANTS,
					pantsColor);
		}
		if (changeColor && selectedPart == 1) {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_IDLE_SLEEVES,
					tempColor);
			Renderer.drawString(pRenderX, Main.WINDOW_HEIGHT - 50, 50, "Sleeves");
		} else {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_IDLE_SLEEVES,
					sleeveColor);
		}
		if (changeColor && selectedPart == 2) {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_IDLE_SKIN,
					tempColor);
			Renderer.drawString(pRenderX, Main.WINDOW_HEIGHT - 50, 50, "Skin");
		} else {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_IDLE_SKIN,
					skinColor);
		}
		if (changeColor && selectedPart == 3) {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_EYES, tempColor);
			Renderer.drawString(pRenderX, Main.WINDOW_HEIGHT - 50, 50, "Eyes");
		} else {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_EYES, eyeColor);
		}
		if (changeColor && selectedPart == 4) {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_SHIRT, tempColor);
			Renderer.drawString(pRenderX, Main.WINDOW_HEIGHT - 50, 50, "Shirt");
		} else {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2, Textures.P_FORWARD_SHIRT, shirtColor);
		}
		if (changeColor && selectedPart == 5) {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2,
					Textures.forwardHairstyles[hairstyle - 1], tempColor);
			Renderer.drawString(pRenderX, Main.WINDOW_HEIGHT - 50, 50, "Hair");
		} else {
			Renderer.drawColoredTexture(pRenderX, pRenderY, pRenderX2, pRenderY2,
					Textures.forwardHairstyles[hairstyle - 1], hairColor);
		}
		if(changingColor) {
			int barWidth =  Main.WINDOW_HEIGHT-128 - (pRenderX+16);
			Renderer.drawRect(pRenderX+16, Main.WINDOW_HEIGHT-64, Main.WINDOW_WIDTH-16, Main.WINDOW_HEIGHT-128, new Color(1,0,0));
			Renderer.drawRect((int)(pRenderX+16+barWidth*tempColor.r), Main.WINDOW_HEIGHT-62, (int)(pRenderX+16+barWidth*tempColor.r+4), Main.WINDOW_HEIGHT-130, selectedColor == 0 ? new Color(1,1,0) : new Color(1,1,1));
			
			Renderer.drawRect(pRenderX+16, Main.WINDOW_HEIGHT-144, Main.WINDOW_WIDTH-16, Main.WINDOW_HEIGHT-208, new Color(0,1,0));
			Renderer.drawRect((int)(pRenderX+16+barWidth*tempColor.g), Main.WINDOW_HEIGHT-142, (int)(pRenderX+16+barWidth*tempColor.g+4), Main.WINDOW_HEIGHT-210, selectedColor == 1 ? new Color(1,1,0) : new Color(1,1,1));
			
			Renderer.drawRect(pRenderX+16, Main.WINDOW_HEIGHT-224, Main.WINDOW_WIDTH-16, Main.WINDOW_HEIGHT-288, new Color(0,0,1));
			Renderer.drawRect((int)(pRenderX+16+barWidth*tempColor.b), Main.WINDOW_HEIGHT-222, (int)(pRenderX+16+barWidth*tempColor.b+4), Main.WINDOW_HEIGHT-290, selectedColor == 2 ? new Color(1,1,0) : new Color(1,1,1));
		}
	}
}
