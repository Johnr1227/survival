package com.cool.entity;

import com.cool.Main;
import com.cool.SoundType;
import com.cool.lib.Direction;
import com.cool.lib.TextureMap;
import com.cool.player.Player;
import com.cool.tile.Tile;
import com.cool.world.World;

public class EntityMob extends Entity {

	public TextureMap map;

	public Direction facing;
	public boolean moving = false;
	public int movingTicks = 0;
	
	public int walkFootDoThingRate = 30;
	
	public SoundType soundType;
	
	public float width = 1;
	public float depth = 1;

	public EntityMob(double xPos, double zPos, World world, Direction facing) {
		super(xPos, zPos, world);
		this.facing = facing;
	}

	@Override
	public void tick(Player p) {
		super.tick(p);
		if (moving)
			movingTicks++;
		else
			movingTicks = 0;
		if(movingTicks%walkFootDoThingRate == (walkFootDoThingRate/2)) {
			Tile t = p.world.tiles[(int)Math.round(xPos)][(int)Math.round(zPos)];
			if(t != null) {
				t.playStepSound();
			}
		}
	}

	@Override
	public void render(Player p, int tWidth) {
		int t = 0;
		switch (facing) {
		case NORTH:
			if(moving) {
				int x = Main.TICKS%walkFootDoThingRate;
				t = x > walkFootDoThingRate/2 ? 4 : 0;
			} else {
				t = 8;
			}
			break;
		case SOUTH:
			if(moving) {
				int x = Main.TICKS%walkFootDoThingRate;
				t = x > walkFootDoThingRate/2 ? 6 : 2;
			} else {
				t = 10;
			}
			break;
		case EAST:
			if(moving) {
				int x = Main.TICKS%walkFootDoThingRate;
				t = x > walkFootDoThingRate/2 ? 7 : 3;
			} else {
				t = 11;
			}
			break;
		case WEST:
			if(moving) {
				int x = Main.TICKS%walkFootDoThingRate;
				t = x > walkFootDoThingRate/2 ? 5 : 1;
			} else {
				t = 9;
			}
			break;
		}
		map.draw(t, (int) (Main.WINDOW_WIDTH / 2 + (width + (xPos - p.xPos)) * tWidth),
				(int) (Main.WINDOW_HEIGHT / 2 + (depth + (zPos - p.zPos)) * tWidth),
				(int) (Main.WINDOW_WIDTH / 2 + (xPos - p.xPos) * tWidth),
				(int) (Main.WINDOW_HEIGHT / 2 + (zPos - p.zPos) * tWidth));
	}
	public boolean canMove(Direction dir, double moveSpeed) {
		switch (dir) {
		case NORTH: {

			double fPosX = xPos + dir.getDirection().x * moveSpeed;
			double fPosZ = zPos + dir.getDirection().z * moveSpeed;

			double x1 = fPosX - width/2;
			double x2 = fPosX + width/2;

			double z = fPosZ;

			if (z < world.obstacles[0].length && world.obstacles[(int) x1][(int) z] == null
					&& world.obstacles[(int) x2][(int) z] == null) {
				return true;
			}
			return false;
		}
		case SOUTH: {
			double fPosX = xPos + dir.getDirection().x * moveSpeed;
			double fPosZ = zPos + dir.getDirection().z * moveSpeed;

			double x1 = fPosX - width/2;
			double x2 = fPosX + width/2;

			double z = fPosZ - depth / 2;

			if (z >= 0 && world.obstacles[(int) x1][(int) z] == null && world.obstacles[(int) x2][(int) z] == null) {
				return true;
			}
			return false;
		}
		case EAST: {
			double fPosX = xPos + dir.getDirection().x * moveSpeed;
			double fPosZ = zPos + dir.getDirection().z * moveSpeed;

			double x = fPosX + width;

			double z1 = fPosZ;
			double z2 = fPosZ - depth / 2;

			if (x < world.obstacles.length && world.obstacles[(int) x][(int) z1] == null
					&& world.obstacles[(int) x][(int) z2] == null) {
				return true;
			}
			return false;
		}
		case WEST:
			double fPosX = xPos + dir.getDirection().x * moveSpeed;
			double fPosZ = zPos + dir.getDirection().z * moveSpeed;

			double x = fPosX - width;

			double z1 = fPosZ;
			double z2 = fPosZ - depth / 2;

			if (x >= 0 && world.obstacles[(int) x][(int) z1] == null && world.obstacles[(int) x][(int) z2] == null) {
				return true;
			}
			return false;
		}
		return false;
	}
}
