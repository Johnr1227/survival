package com.cool;

import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;

import java.io.IOException;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.lwjgl.glfw.GLFWKeyCallback;
import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.glfw.GLFWWindowFocusCallback;
import org.lwjgl.glfw.GLFWWindowSizeCallback;
import org.lwjgl.opengl.GL;

import com.cool.audio.Audio;
import com.cool.lib.Keyboard;
import com.cool.menu.CharacterCustomize;
import com.cool.menu.MainMenu;
import com.cool.menu.Menu;

public class Main {

	public static long window;

	public static int WINDOW_WIDTH = 0;
	public static int WINDOW_HEIGHT = 0;

	public static int MOUSEX;
	public static int MOUSEY;

	public static int TICKS = 0;

	public static Game game;
	
	public static boolean windowFocused = false;
	
	public static CharacterCustomize characterCustomize;

	public static void main(String[] args) throws IOException {
		if (!glfwInit()) {
			throw new IllegalStateException("Failed to initialize GLFW!");
		}
        String data = "I will write this String to File in Java";
        int noOfLines = 10000;
        writeUsingFileWriter(data);
        
        writeUsingBufferedWriter(data, noOfLines);
        
        writeUsingFiles(data);
        
        writeUsingOutputStream(data);
        System.out.println("DONE");
		GLFWVidMode videoMode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		WINDOW_WIDTH = 720;
		WINDOW_HEIGHT = 720;

		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE);

		window = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, "Top Down", 0, 0);
		if (window == 0) {
			throw new IllegalStateException("Failed to create window!");
		}
		glfwSetWindowPos(window, (videoMode.width() - WINDOW_WIDTH) / 2, (videoMode.height() - WINDOW_WIDTH) / 2);

		glfwShowWindow(window);

		glfwMakeContextCurrent(window);
		@SuppressWarnings("unused")
		GLFWKeyCallback keyCallback;
		glfwSetKeyCallback(window, keyCallback = new Keyboard());

		GL.createCapabilities();
		glEnable(GL_TEXTURE_2D);
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glOrtho(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT, 1, -1);

		Textures.setTextures();

		// set background color
		glClearColor(0f, 0f, 0f, 1f);

		Audio.init();
		Sounds.init();

		game = new Game(window);

		glfwSetWindowSizeCallback(window, new GLFWWindowSizeCallback() {

			@Override
			public void invoke(long window, int width, int height) {
				WINDOW_WIDTH = width;
				WINDOW_HEIGHT = height;
//				glOrtho(0, WINDOW_WIDTH, WINDOW_HEIGHT, 0, 1, -1);

			}
		});
		glfwSetWindowFocusCallback(window, new GLFWWindowFocusCallback() {
			
			@Override
			public void invoke(long arg0, boolean focused) {
				if(focused) {
					windowFocused = true;
				} else {
					windowFocused = false;
					if(Menu.currentMenu == Menu.MenuTypes.GAME) {
						game.paused = true;
					}
				}
			}
		});
//		Sounds.MUSIC.loop();
		MainMenu mainMenu = new MainMenu();
		mainMenu.init();
		characterCustomize = new CharacterCustomize();
		characterCustomize.init();
		while (!glfwWindowShouldClose(window)) {
			glfwPollEvents();
			if(windowFocused) {
				if(Menu.currentMenu == Menu.MenuTypes.MAIN) {
					mainMenu.tick();
					glClear(GL_COLOR_BUFFER_BIT);
					mainMenu.render();
					MOUSEX = game.getCursorPosX();
					MOUSEY = game.getCursorPosY();
					glfwSwapBuffers(window);
				}
				if(Menu.currentMenu == Menu.MenuTypes.CHARACTER_CUSTOMIZE) {
					characterCustomize.tick();
					glClear(GL_COLOR_BUFFER_BIT);
					characterCustomize.render();
					MOUSEX = game.getCursorPosX();
					MOUSEY = game.getCursorPosY();
					glfwSwapBuffers(window);
				}
				if(Menu.currentMenu == Menu.MenuTypes.GAME) {
					glClear(GL_COLOR_BUFFER_BIT);
					game.draw();
					game.tick();
					MOUSEX = game.getCursorPosX();
					MOUSEY = game.getCursorPosY();
					glfwSwapBuffers(window);
				}
			}
			TICKS++;
		}

		Audio.destroy();
		glfwTerminate();
	}

    /**
     * Use Streams when you are dealing with raw data
     * @param data
     */
    private static void writeUsingOutputStream(String data) {
        OutputStream os = null;
        try {
            os = new FileOutputStream(new File("/Users/pankaj/os.txt"));
            os.write(data.getBytes(), 0, data.length());
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            try {
                os.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * Use Files class from Java 1.7 to write files, internally uses OutputStream
     * @param data
     */
    private static void writeUsingFiles(String data) {
        try {
            Files.write(Paths.get("/Users/pankaj/files.txt"), data.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Use BufferedWriter when number of write operations are more
     * It uses internal buffer to reduce real IO operations and saves time
     * @param data
     * @param noOfLines
     */
    private static void writeUsingBufferedWriter(String data, int noOfLines) {
        File file = new File("/Users/pankaj/BufferedWriter.txt");
        FileWriter fr = null;
        BufferedWriter br = null;
        String dataWithNewLine=data+System.getProperty("line.separator");
        try{
            fr = new FileWriter(file);
            br = new BufferedWriter(fr);
            for(int i = noOfLines; i>0; i--){
                br.write(dataWithNewLine);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            try {
                br.close();
                fr.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Use FileWriter when number of write operations are less
     * @param data
     */
    private static void writeUsingFileWriter(String data) {
        File file = new File("/Users/pankaj/FileWriter.txt");
        FileWriter fr = null;
        try {
            fr = new FileWriter(file);
            fr.write(data);
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            //close resources
            try {
                fr.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
